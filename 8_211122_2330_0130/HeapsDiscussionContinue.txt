Next topics to be discussed:-
1) Heap construction
2) Heap sort
3) Prcatical implementations
   - Priority scheduling
4) questions on heaps
   - merging
   - running median
   
   
   
-> Heap Construction:-

- vector = {23, 26, 10, 9, 17, 5, 29, 25, 31, 45, 18, 39, 34, 81, 99}
  min heap of this vector
  
  Method1:
  1) Take one element one by one from vector and insert into heap 
     Time complexity - O(n*logn)
  
  Method2:
  1) copy each element from vector to heap
  2) do shift down operation from n/2 to 1  
  
  i) Assume last element index is N
     So Parent idx will be floor of n/2
	 So in heap leafs will start from n/2 + 1 idx to n
	 Time Complexity: O(n)
	 
	 
	 -> height of node and height of tree
	    height of node = distance of the node to the farthest leaf
	    height of tree = height of root
	 
	 -> Eg. h =  4
	        n = 31
	        2^0 + 2^1 + 2^2 + 2^3 + 2^4
	        Formula for no of nodes having height h = n/(2^(h+1))
            how many nodes are there in this heap having height as 0 = 31/2^1 = 31/2 = 	15.5 = 16	
                                                         height as 1 = 31/2^2 = 31/4 = 7. = 8
                                                         height as 2 = 31/2^3 = 31/8 = 3. = 4
														 
														 
														

->  Heap Sort
    Min heap -> descending order
    Max heap -> ascending order	
	
	temporary size variable = initialize this with value n
	
	eg. 10 40 25 41 42 26 27



->  CPU has to complete all these 100 processes
	7 processes are having some priority (highest priority will be having smallest value)
	
	20 15 23 10 8 29 87
	
	Max heap 
	
	Schedulings - Process scheduling (in OS)
	            - Javascript process execution
				
				
-> Questions on heaps:

   1) Merging the sorted vectors 
   
      - first consider there are two vectors only
	    
		v1 = {20, 30, 40}        (n)
		v2 = {10, 25}            (m)
		
		v = {10, 20, 25, 30, 40}  (n+m)
		
		Method1 = push both vectors and sort the array
		        = {20, 30, 40, 10, 25} = new size will be n+m
		        = O((n+m)*(log(n+m)))
				
		Method2 = O(n+m)
		        = will take two pointers
		        = {10, 20, 25, 30, 40}
				
				
	 - suppose there are k vectors
	 
	 
	    v1 = {10, 20, 30, 40}
		v2 = {15, 25, 26}
		v3 = {5, 16, 42}
		v4 = {12, 35, 37}
		v5 = {28, 47, 57}
		
		
		min heap of size k
		heap = {}
		heap = {20, 25, 35, 28, 42}...
		v = {5, 10, 12, 15, 16}....
		
		
		
    2) Running median
	
	   We have to design one data structure which will tell us the median of elements inserted till now.
	   Odd elements, median middle otherwise median will be smaller index one
       
       Elements = {20, 10, 4, 28, 72, 78}
                = {4, 10, 20, 28, 72, 78} = 20    

	   
	   v = {10}
	   median = 10
	   
	   v = {10, 5}
	   {5, 10}
	   median = 5

       v = {10, 5, 1}
       {1, 5, 10}
       median = 5	   
	   
	   
	   Method1: sorting everytime after insertion
	   suppose there are n insertions, then time complexity will be:-
	   i) n times sorting
	      = n * (n*logn)
		  = n^2 *log(n)
		  
	   Method2: We will keep two heaps one is min heap ann one is max heap
	   
	   min   =  store second half	   
	   max   =  store first half
	   top element of max heap will be the median 
	   
	   i) v = {10}	   
	   max = {10}, min = {}
	   median = 10
	   
	   ii) v = {10, 5}
	   max = {5}, min = {10}
	   median = 5
	   
	   iii) v = {10, 5, 1}
	   max = {5, 1}, min = {10}
	   median = 5
	   
	   iv) v = {10, 5, 1, 9}
	   max = {5, 1}, min = {10, 9}
	   median = 5
	   
	   v) v = {10, 5, 1, 9, 20}
	   max = {9, 5, 1}, min = {10, 20}
       median = 9	   